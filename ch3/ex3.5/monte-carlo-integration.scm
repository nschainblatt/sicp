(define (main)
  (let* ((radius 1000)
	 (circle (make-circle (make-point 5 7) radius))
	 (x1 (- (- radius) 5))
	 (x2 (+ radius 5))
	 (y1 (- (- radius) 7))
	 (y2 (+ radius 7))
	 (rectangle-area (* (- x2 x1) (- y2 y1)))
	 (integral (estimate-integral (in-unit-circle? circle) x1 x2 y1 y2 1000000))
	 (circle-area (* integral rectangle-area 1.0))
	 (pi-estimate (/ circle-area (square radius))))
    pi-estimate))

(define (estimate-integral P x1 x2 y1 y2 trials)
  (define (experiment)
    (let ((x (random-in-range x1 x2))
	  (y (random-in-range y1 y2)))
      (P x y)))
  (monte-carlo trials experiment))

(define (in-unit-circle? circle)
  (let ((center (circle-center circle))
	(radius (circle-radius circle)))
    (lambda (x y)
      (<= (+ (square (- x (point-x center))) (square (- y (point-y center)))) (square radius)))))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
	   (/ trials-passed trials))
	  ((experiment)
	   (iter (- trials-remaining 1)
		 (+ trials-passed 1)))
	  (else
	    (iter (- trials-remaining 1)
		  trials-passed))))
  (iter trials 0))

(define (make-circle center radius) (cons center radius))
(define circle-center car)
(define circle-radius cdr)
(define (make-point x y) (cons x y))
(define point-x car)
(define point-y cdr)

(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))

(define (square x) (* x x))

(define (<= x y)
  (or (< x y) (= x y)))
