(define (segments->painter segment-list)
  (lambda (frame)
    (for-each
      (lambda (segment)
        (draw-line
          ((frame-coord-map frame) (start-segment segment))
          ((frame-coord-map frame) (end-segment segment))))
      segment-list)))

(define (outline)
  (let ((painter (segments->painter (list (make-segment (make-vect 0 0) (make-vect 0 1))
                                          (make-segment (make-vect 0 1) (make-vect 1 1))
                                          (make-segment (make-vect 1 1) (make-vect 1 0))
                                          (make-segment (make-vect 1 0) (make-vect 0 0))))))
    (painter (make-frame (make-vect 0 0) (make-vect 0 1) (make-vect 1 0)))))

(define (X)
  (let ((painter (segments->painter (list (make-segment (make-vect 0 0) (make-vect 1 1))
                                          (make-segment (make-vect 0 1) (make-vect 1 0))))))
    (painter (make-frame (make-vect 0 0) (make-vect 0 1) (make-vect 1 0)))))

(define (diamond)
  (let ((painter (segments->painter (list (make-segment (make-vect 0 0.5) (make-vect 0.5 1))
                                          (make-segment (make-vect 0.5 1) (make-vect 1 0.5))
                                          (make-segment (make-vect 1 0.5) (make-vect 0.5 0))
                                          (make-segment (make-vect 0.5 0) (make-vect 0 0.5))))))
    (painter (make-frame (make-vect 0 0) (make-vect 0 1) (make-vect 1 0)))))

;; 17 lines for wave
(define (wave)
  (let ((painter (segments->painter (list (make-segment (make-vect 0.2 0) (make-vect 0.3 0.5))
                                          (make-segment (make-vect 0.3 0) (make-vect 0.4 0.3))
                                          (make-segment (make-vect 0.5 0) (make-vect 0.4 0.3))
                                          (make-segment (make-vect 0.6 0) (make-vect 0.5 0.5))

                                          (make-segment (make-vect 0.7 0.2) (make-vect 0.5 0.5))
                                          (make-segment (make-vect 0 0.6) (make-vect 0.1 0.4))
                                          (make-segment (make-vect 0.1 0.4) (make-vect 0.2 0.6))
                                          (make-segment (make-vect 0.2 0.6) (make-vect 0.3 0.5))

                                          (make-segment (make-vect 0 0.8) (make-vect 0.1 0.6))
                                          (make-segment (make-vect 0.1 0.6) (make-vect 0.2 0.65))
                                          (make-segment (make-vect 0.2 0.65) (make-vect 0.3 0.65))
                                          (make-segment (make-vect 0.3 0.65) (make-vect 0.2 0.8))

                                          (make-segment (make-vect 0.2 0.8) (make-vect 0.3 0.9))
                                          (make-segment (make-vect 0.5 0.9) (make-vect 0.6 0.8))
                                          (make-segment (make-vect 0.6 0.8) (make-vect 0.5 0.65))
                                          (make-segment (make-vect 0.5 0.65) (make-vect 0.6 0.65))
                                          (make-segment (make-vect 0.6 0.65) (make-vect 0.7 0.4))))))
    (painter (make-frame (make-vect 0 0) (make-vect 0 1) (make-vect 1 0)))))

(define (make-segment v1 v2)
  (cons v1 v2))
(define (start-segment s)
  (car s))
(define (end-segment s)
  (cdr s))

(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))
(define (get-frame-origin frame)
  (car frame))
(define (get-frame-edge1 frame)
  (car (cdr frame)))
(define (get-frame-edge2 frame)
  (car (cdr (cdr frame))))


(define (make-vect x y)
  (cons x y))
(define (xcor-vect v)
  (car v))
(define (ycor-vect v)
  (cdr v))
(define (add-vect v1 v2)
  (make-vect (+ (xcor-vect v1) (xcor-vect v2)) (+ (ycor-vect v1) (ycor-vect v2))))
(define (sub-vect v1 v2)
  (make-vect (- (xcor-vect v1) (xcor-vect v2)) (- (ycor-vect v1) (ycor-vect v2))))
(define (scale-vect v s)
  (make-vect (* s (xcor-vect v)) (* s (ycor-vect v))))
